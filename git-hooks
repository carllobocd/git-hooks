#!/bin/bash

usage() {
	echo "usage: git hooks install"
	echo
	echo "git-hooks is a php based hook system allowing you to easily configure your hooks"
}

install() {
	base=
	dryrun=
	src='%sourcedir%'
	ignore='(^\.|^config\.php$|^install|\.txt$|README.md|~$)'

	if [[ "`uname -o`" = "Cygwin" ]]; then
		bc="cp -rf"
	else
		bc="ln -sf"
	fi

	if [ -d .git/hooks ]; then
		base=.git/hooks
	elif [ -d hooks ]; then
		base=hooks
	else
		echo "This script needs to be run whilst in the root of your git project"
		exit 1
	fi

	i=0
	commands=()
	for f in $(ls -A $src 2>/dev/null); do
		if [[ $f =~ $ignore ]]; then
			continue
		fi

		if [[ $f = "config.sample.php" ]]; then
			if [[ -e $base/config.php ]]; then
				continue
			fi
			commands[$i]="$bc $src/$f config.php"
		else
			commands[$i]="$bc $src/$f ."
		fi
		let i++
	done

	mailHooks="applypatch-msg pre-applypatch post-applypatch"
	commitHooks="pre-commit prepare-commit-msg commit-msg post-commit"
	workingcopyHooks="pre-rebase post-checkout post-merge pre-auto-gc"
	remoteHooks="pre-receive update post-receive post-update"
	hooks="$workingcopyHooks $commitHooks $mailHooks $remoteHooks"
	for f in $hooks; do
		commands[$i]="$bc ./one-hook $f"
		let i++
	done
	
	echo "Installing files:"
	echo ""
	pushd $base
	for ((j=0;j<$i;j++)) do
		if [ -z $dryrun ]; then
			echo "    ${commands[$j]}"
		else
			echo "    ${commands[$j]} [dryrun]"
			continue
		fi
		${commands[$j]}
	done
	popd
	chmod 755 -R .git/hooks/*	
	echo ""
	echo "Completed, edit $base/config.php to modify this repositories hooks"
	exit 0
}

main() {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	if [ "$1" == "install" ]; then
		install
		exit 1
	fi

	usage
	exit 1
}

main "$@"
